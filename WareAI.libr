local StarterGui = game:GetService("StarterGui")
--// SRV






--[[ 
/**
 * Open Source Library - Do not modify!
 *
 * This file is part of WareAI, an open source library for bypassing robust anticheat in game
 * While this project is open source, modifications to this specific file are strongly discouraged.
 *
 * WARNING:
 * This code is main project, crucial to exploit and "bypass" the anticheat itself
 * Modifying it may lead to unexpected behavior or break functionality of the WareAI.
 * If changes are absolutely necessary, please:
 * 1. Consult with YxGG Team or sxc_qq1 in discord 
 * 2. Thoroughly test any modifications
 * 3. Submit changes through the official contribution process
 *
 * For more information about WareAI/Lib-WareAI and how to contribute, please contact:
 * sunshinexjuhari@protonmail.com
 *
 * By using this library, you acknowledge that while the source is open,
 * responsible usage and contribution are essential for the project's integrity.

...................
 *. By: sxc_qq1 / sunshinexjuhari@protonmail.com
*/
]]







--[[ 
WareAI Script Documentation

### Purpose:
This script is part of the WareAI library, a tool designed to bypass anti-cheat systems in Roblox games. Its primary goal is to allow specific exploits or modifications while avoiding detection from the game's security measures. It achieves this by interacting with Roblox's core services and overriding key functionalities.

---

### How It Works:
1. **Initialization**:
   - The script begins by importing essential Roblox services like `StarterGui`. These services provide access to critical game components such as user interfaces and event systems, which the script uses to implement its functionality.

2. **Anti-Cheat Detection and Bypass**:
   - The script actively scans for anti-cheat mechanisms within the game, such as:
     - Event listeners monitoring unusual player actions.
     - Checks for unauthorized script execution or tampering.
   - Once detected, the script disables or overrides these mechanisms, ensuring that suspicious activities (e.g., exploit usage) are not flagged.

3. **Exploit Functionality**:
   - By hooking into Roblox’s API functions and events, the script manipulates in-game mechanics. Examples include:
     - Teleporting players or modifying character properties (e.g., speed, health).
     - Adjusting in-game currency or resources.
     - Altering physics to enable enhanced movements or actions.
   - These exploits are applied dynamically, often in response to player inputs or scripted triggers.

4. **Dynamic Adaptation**:
   - The script includes logic to adapt to various games and anti-cheat implementations. This makes it a versatile tool for bypassing security measures across multiple Roblox experiences.

---

### Key Features:
- **Integration with Roblox Services**:
  - The script interacts with services like `StarterGui` to handle game UI and hide exploit activity from players or admins.
- **Custom Functions**:
  - Built-in Lua functions are used to scan, inject, and bypass anti-cheat systems seamlessly.
- **Event Handlers**:
  - Monitors game events in real time to detect and counteract anti-cheat mechanisms as they activate.

---

### Usage Guidelines:
- **Modifications**:
  - While the script is open-source, modifications should be avoided unless necessary. Unauthorized edits could lead to unexpected behavior or break its functionality.
  - If changes are needed:
    - Consult the WareAI development team (e.g., YxGG Team or sxc_qq1 via Discord).
    - Perform thorough testing to ensure stability.
- **Intended Use**:
  - This script is designed for development and research purposes only. Misuse for malicious activities may violate Roblox's Terms of Service and result in account suspension or legal consequences.

---

### Warnings:
- Modifying anti-cheat systems in games is considered unethical unless done for legitimate research or educational purposes.
- Ensure you have permission to use this tool in any context, as unauthorized usage may result in penalties.

---

By understanding the purpose and inner workings of this script, you can ensure its responsible and effective usage while maintaining the integrity of the WareAI project.
]]










--[[
basic integration,classes + mtd

 |          !   INDICATOR, ABBV ?NOTE.    !
  ASN = Assign, assigning a value, property, ? functionality to a variable, object, ? configuration. This is used to define behaviors ?UND + link functions, ?set up parameters for operation. 
  PRV = Prevent, preventing (mtd) from (player), ?MTD : (reason) as ()
  MTD = Method, used by prv, mnp, clss ?BYP ?MNP
  CLSS = Classes
  NTI = Init, runned by functions ?classes *, a statement/code that runs another function ?mult-classes ?when a function call is more than 1 + ?bigger than the first value of the number, ?*
  BYP = Bypass, break through, skipping a function ?system, *UND
  MNP = Manipulation, Tricking ?going through without noticing + ?making a way without attention ?altering the content of a string ?*
  IN = Inside, to indicate where's this statement goal, (mtd) ,?clss
  SCR = Script, UND
  CFG = Config ?configuration
  X = Not, ?not included + isn't the same, ?diff purposes , UND.
  -----------

  ADDT:

  NONE = Empty / Not there, undefined
  UND = Undefined ?don't know, cannot be determined / hard to tell.
  MULT-SRV = Multiple services, if service is more than 1, optional.
  MULT-? = Multiple (additional note) as "?", if additional or optional and not specific, classes nor integration ?etc.
  CURR = Current, this time, ?now + ?not before past and not after the future, ~ time ?specific
  ~ = Used, ABBREVATIONS ?INDICATOR, If before = is a abbr +, ?a word, example "Current = this is the ~ date", ~ is a word ?text or message, ~ used for simple terms instead of typing the word itsef, as *, UND.
  () = Store or Note for message, can be with () ?after mult ?services *
  ? = Or, same as "/" or "or", used for different word ?other cases
  * = multiple reason ?cases, can't be counted ?UND
  : = used after ?before, as an "result" of the previous () ?message, *, 
  + = With, optional ?can use "," for simple term
  = = Equal, ?meaning + ?result, can be used in a value ?etc
  !!! = NTBU + ?Need to be updated, used on a part of code ?lines if code ?line need to be changed ?error, if has something that is not fully supported ?cannot be there + ?revising, ?outdated
  ABBV = Abbreviation 
  ADDT = Additional, seperated from main message ?note ?etc, seperated if too many
  ADDR = Address, lines ?exactly the ~ code, ?used for a value ?UND
 |
  
]]

local g = getgenv()
g["_exp"] = {}
local e = g["_exp"]

--// CFG ( FL ) + MULT-VAL
e["cfg"] = {
    pk = true, -- // BYP, PRV:Kick
    ms = true, -- // MNP, MTD:Remote ?RF
    bc = true, -- // BYP, MTD:Ban
    si = true, -- // UND, NONE ?POSSIBLE INTEG
    ac = true, -- // MNP, MTD:Spoof
    ma = true, -- // UND ?*
    dm = true, -- // MNP, *
    sc = true, -- // UND, NONE
    lg = true, -- // LOG, NONE
    sp = true, -- // UND, NONE
    hk = true, -- // UND, NONE
    bt = true, -- // ( I'm too lazy to put more note here. )
    uaf = true,
    bac = true,
    dac = true,
    vdac = true,
    ad = true,
    bp = true
    
    --// NONE, !!!
}

--// MULT-SRV, ( LP, MT, WS, RS, HT) + GT = X
e["cls"] = {
    lp = game.Players.LocalPlayer,
    mt = getrawmetatable(game),
    ws = game.Workspace,
    rs = game.ReplicatedStorage,
    ht = game.HttpService,
    gt = getrenv()
}

e["fn"] = {}

--// MULT-* ( catch ) ?*
e["fn"]["try"] = function(func)
    return function(...)
        local s, r = pcall(func, ...)
        if not s then
            print("[Lib-WareAI] Warning:", r)
        end
        return r
    end
end

--// MULT-*, ?UND
print("USING: WareAI     (version :1.4_a.bt, classes=tr)")
print("USING: Lib-WareAI (version :1.1_beta, classes=fls)")
print("") --// NONE
print("") --// NONE

--[[
// CLASSES=TR, = True  (meaning)
// CLASSES=FLS = Fluss (meaning)

// Fluss = flash, which is faster (flash)
// True  = NONE, UND.
]]

--// CONSOLE BANNER :
local wr_lgg = [[

=========================================
              WareAI Bypass
=========================================
 Version: 1.4_a.bt
 Lastest version? Yes
-----------------------------------------
 What does it do?
 - Bypasses and manipulates anti-cheat systems.
 - Provides exploit-level integration for Roblox games.
 - Ensures stability with error handling.

 Why is it important?
 - Protects your script from being interrupted by anti-cheats.
 - Allows full control over game mechanics without restrictions.
 - Supports customization and toggles for various bypass features.

 Is it good?
 - ✅ anti-detection capabilities.
 - ✅ universal anticheat finder.
 - ✅ function isolation.
 - ✅ robust anticheat bypasser.
 - ✅ reliable and easy-to-use framework.
 - ✅ already provided an easy-to-use library.

-----------------------------------------
   Developed by sxc_qq1 / YxGG Team
=========================================
----------------------------

CURR:
WareAI     (Now)
Lib-WareAI (Now)
 - ROLE >
    WareAI = Main, anticheat bypass.
    Lib-WareAI = Second, handler

........................
]]
print("")

local WareAI = {}

WareAI.lib = { -- CFG
    intro_cons = false, -- //DEF
    auto_cons = false   -- //DEF
}

function WareAI.Init()
    if not WareAI.lib then
        print("[WareAI] WareAI.Starter failed to start")
        print("[Lib-WareAI] Debug: missing Init(), cannot start due to None call functions on lib")
        return --// (RETURN)
    end

    if WareAI.lib.intro_cons then
        print(wr_lgg)
    end

    if WareAI.lib.auto_cons then
        local gui = game:GetService("CoreGui")
        if gui:FindFirstChild("DevConsole") then
            gui.DevConsole.Visible = true
        else
            game:GetService("StarterGui"):SetCore("DevConsoleVisible", true)
        end
    end
end

--// UND ?*
e["fn"]["rw"] =
    e["fn"]["try"](
    function(st)
        setreadonly(e["cls"]["mt"], not st)
    end
)

-- // BYP, MTD: NONE ?UND
e["fn"]["pk"] =
    e["fn"]["try"](
    function()
        if not e["cfg"]["pk"] then
            return
        end
        e["fn"]["rw"](false)

        local o = e["cls"]["mt"]["__index"]
        e["cls"]["mt"]["__index"] = function(t, k)
            if t == e["cls"]["lp"] and k == "Kick" then
                return function(...)
                    
                    return nil
                end
            end
            return o(t, k)
        end

        e["fn"]["rw"](true)
    end
)

-- // MNP, PRV: *
e["fn"]["ms"] =
    e["fn"]["try"](
    function()
        if not e["cfg"]["ms"] then
            return
        end
        for _, o in pairs(e["cls"]["rs"]:GetDescendants()) do
            if o:IsA("RemoteEvent") or o:IsA("RemoteFunction") then
                o.FireServer = function(self, ...)
                    
                    return nil
                end
                o.InvokeServer = function(self, ...)
                    
                    return nil
                end
            end
        end
    end
)

--// UND
e["fn"]["bc"] =
    e["fn"]["try"](
    function()
        if not e["cfg"]["bc"] then
            return
        end
        e["fn"]["rw"](false)

        local o = e["cls"]["mt"]["__namecall"]
        e["cls"]["mt"]["__namecall"] =
            newcclosure(
            function(self, ...)
                local m = getnamecallmethod()
                if m == "Kick" or m == "Ban" then
                    
                    return nil
                elseif m == "FireServer" or m == "InvokeServer" then
                    
                    return o(self, "Bypassed", ...)
                end
                return o(self, ...)
            end
        )

        e["fn"]["rw"](true)
    end
)

e["fn"]["si"] =
    e["fn"]["try"](
    function()
        if not e["cfg"]["si"] then
            return
        end

        for _, obj in pairs(e["cls"]["ws"]:GetDescendants()) do
            if obj:IsA("Script") or obj:IsA("ModuleScript") then
                if obj.Source:lower():find("anti") or obj.Source:lower():find("kick") or obj.Source:lower():find("ban") then
                    
                    obj.Disabled = true
                end
            end
        end
    end
)

e["fn"]["ac"] =
    e["fn"]["try"](
    function()
        if not e["cfg"]["ac"] then
            return
        end
        e["fn"]["rw"](false)

        local gs = game.GetService
        game.GetService = function(self, n)
            if n:lower():find("anti") or n:lower():find("cheat") then
                
                return {}
            end
            return gs(self, n)
        end

        e["fn"]["rw"](true)
    end
)

e["fn"]["ma"] =
    e["fn"]["try"](
    function()
        if not e["cfg"]["ma"] then
            return
        end
        e["fn"]["rw"](false)

        for _, obj in pairs(e["cls"]["ws"]:GetDescendants()) do
            if obj:IsA("Script") or obj:IsA("ModuleScript") then
                if obj.Source:lower():find("anti") or obj.Source:lower():find("cheat") then
                    obj.Source = "-- MNP, MTD:EXP"
                    
                end
            end
        end

        local o = e["cls"]["mt"]["__namecall"]
        e["cls"]["mt"]["__namecall"] =
            newcclosure(
            function(self, ...)
                local m = getnamecallmethod()
                if m:lower():find("kick") or m:lower():find("ban") then
                    
                    return nil
                elseif m:lower():find("fireserver") or m:lower():find("invokeserver") then
                    
                    return o(self, "MTP", ...)
                end
                return o(self, ...)
            end
        )

        e["fn"]["rw"](true)
    end
)

--// UND
e["fn"]["dm"] =
    e["fn"]["try"](
    function()
        if not e["cfg"]["dm"] then
            return
        end
        local env = getfenv()
        for k, v in pairs(env) do
            if type(v) == "function" and islclosure(v) then
                setupvalue(v, 1, nil)
                
            end
        end
    end
)

--// PRV, SRV: HR (Http Request)
e["fn"]["sc"] =
    e["fn"]["try"](
    function()
        if not e["cfg"]["sc"] then
            return
        end
        hookfunction(
            game.HttpService.RequestAsync,
            function(...)
                
                return nil
            end
        )

        local old = getrenv().getfenv
        setreadonly(e["cls"]["gt"], false)
        getrenv().getfenv = function(...)
            
            return old(...)
        end
        setreadonly(e["cls"]["gt"], true)
    end
)

--// UND
e["fn"]["lg"] =
    e["fn"]["try"](
    function()
        if not e["cfg"]["lg"] then
            return
        end

        e["fn"]["rw"](false)

        local o = e["cls"]["mt"]["__newindex"]
        e["cls"]["mt"]["__newindex"] = function(t, k, v)
            
            return o(t, k, v)
        end

        e["fn"]["rw"](true)
    end
)

--// UND, ?*
e["fn"]["sp"] =
    e["fn"]["try"](
    function()
        if not e["cfg"]["sp"] then
            return
        end

        e["fn"]["rw"](false)

        local o = e["cls"]["mt"]["__index"]
        e["cls"]["mt"]["__index"] = function(t, k)
            if k == "Value" then
                
                return "SpoofedValue"
            end
            return o(t, k)
        end

        e["fn"]["rw"](true)
    end
)

e["fn"]["hk"] =
    e["fn"]["try"](
    function()
        if not e["cfg"]["hk"] then
            return
        end

        hookfunction(
            game.HttpService.RequestAsync,
            function(...)
                return {Success = true, StatusCode = 200, Body = "SpoofedResponse"}
            end
        )

        hookfunction(
            setmetatable,
            function(t, mt)
                --// Printing will be a bad idea.
                return setmetatable(t, mt)
            end
        )
    end
)

--//BYP, UND
e["fn"]["bt"] =
    e["fn"]["try"](
    function()
        if not e["cfg"]["brt"] then
            return
        end

        hookfunction(
            setmetatable,
            function(t, mt)
                local oldMeta = getmetatable(t)
                if oldMeta and oldMeta.__metatable then
                    oldMeta.__metatable = nil -- Remove protection
                end
                return setmetatable(t, mt)
            end
        )

        hookfunction(
            getmetatable,
            function(t)
                local mt = getmetatable(t)
                if mt and mt.__metatable then
                    mt.__metatable = nil -- Unlock the metatable
                end
                return mt
            end
        )
    end
)

--[[
/*

Less note.

*/
]]
e["fn"]["uaf"] =
    e["fn"]["try"](
    function()
        if not e["cfg"]["uaf"] then
            return
        end

        local suspiciousBehaviors = {}
        local blacklistKeywords = {"anticheat", "security", "protection", "bypass"} -- Common AC-related names
        local scannedObjects = {}

        local function lib_log(reason, source)
            table.insert(suspiciousBehaviors, {Reason = reason, Source = source or "Unknown"})
        end

        local function deepScan(obj)
            if scannedObjects[obj] then
                return
            end

            scannedObjects[obj] = true
            if type(obj.Name) == "string" then
                for _, keyword in ipairs(blacklistKeywords) do
                    if obj.Name:lower():find(keyword) then
                        lib_log("[Lib-WareAI] object detected", obj.Name)
                    end
                end
            end

            if typeof(obj.GetDescendants) == "function" then
                for _, child in ipairs(obj:GetDescendants()) do
                    deepScan(child)
                end
            end
        end

        for _, remote in ipairs(game:GetDescendants()) do
            if remote:IsA("RemoteEvent") or remote:IsA("RemoteFunction") then
                hookfunction(
                    remote.FireServer,
                    function(...)
                        
                        return nil
                    end
                )
                hookfunction(
                    remote.InvokeServer,
                    function(...)
                        
                        return nil
                    end
                )
            end

            if remote:IsA("LocalScript") or remote:IsA("ModuleScript") then
                deepScan(remote)
            end
        end

        --// RUNTIME
        hookfunction(
            setmetatable,
            function(t, mt)
                if mt and mt.__metatable then
                    -- No print!
                end
                return setmetatable(t, mt)
            end
        )

        --// MT, ( MT = METATABLE, not in ABBR ?INDICATOR )
        hookfunction(
            getrawmetatable,
            function(obj)
                local mt = getrawmetatable(obj)
                if mt and mt.__metatable then
                    
                end
                return mt
            end
        )

        --// *
        e["fn"]["log"](
            function()
                if #suspiciousBehaviors > 0 then
                    for _, suspicion in ipairs(suspiciousBehaviors) do
                        
                    end
                else
                    print("[Lib-WareAI] No suspicious behaviors detected.")
                end
            end
        )
    end
)

e["fn"]["dac"] =
    e["fn"]["try"](
    function()
        if not e["cfg"]["dac"] then
            return
        end

        local function disableObject(obj)
            if obj:IsA("LocalScript") or obj:IsA("ModuleScript") then
                hookfunction(
                    obj.Destroy,
                    function()
                        return nil
                    end
                )
                obj.Disabled = true
            elseif obj:IsA("RemoteEvent") or obj:IsA("RemoteFunction") then
                hookfunction(
                    obj.FireServer,
                    function()
                        return nil
                    end
                )
                hookfunction(
                    obj.InvokeServer,
                    function()
                        return nil
                    end
                )
            elseif obj:IsA("BindableFunction") or obj:IsA("BindableEvent") then
                obj:ClearAllChildren()
            end
        end

        local function analyzeBehavior(obj)
            local suspicious = false

            if typeof(obj) == "function" and debug.getinfo(obj).source:find("Script") then
                suspicious = true
            end

            --// RE ?R
            if obj:IsA("RemoteEvent") or obj:IsA("RemoteFunction") then
                local connections = getconnections(obj.OnClientEvent or obj.OnClientInvoke)
                if #connections > 0 then
                    suspicious = true
                end
            end

            
            if obj:IsA("LocalScript") and obj.Source:find("Input") then
                suspicious = true
            end

            return suspicious
        end

        --// IF AC = True
        local function disable_ac()
            local found_ac = false
            for _, obj in ipairs(game:GetDescendants()) do
                if analyzeBehavior(obj) then
                    disableObject(obj)
                    found_ac= true
                end
            end
            return found_ac
        end

        --// MSG GUI
        local function dsp(status)
            local gui = Instance.new("ScreenGui", game.Players.LocalPlayer.PlayerGui)
            local frame = Instance.new("Frame", gui)
            local label = Instance.new("TextLabel", frame)

            gui.Name = "AC_st"
            frame.Size = UDim2.new(0.3, 0, 0.1, 0)
            frame.Position = UDim2.new(0.35, 0, 0.85, 0)
            frame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
            label.Size = UDim2.new(1, 0, 1, 0)
            label.Text = status
            label.TextColor3 = Color3.fromRGB(255, 255, 255)
            label.BackgroundTransparency = 1
            label.TextScaled = true

            game:GetService("Debris"):AddItem(gui, 5)
        end

        if disable_ac() then
            --// NONE
        else
            dsp("None activity.")
        end
    end
)

--// BYP, PRV:AC ?ANTICHEAT

e["fn"]["bac"] =
    e["fn"]["try"](
    function()
        if not e["cfg"]["bac"] then return end
        local hc, hr, ps

        hc = function()
            hookfunction(
                getrawmetatable,
                function(o)
                    if not checkcaller() then return nil end
                    return getrawmetatable(o)
                end
            )

            hookfunction(
                setreadonly,
                function(t, s)
                    if not checkcaller() then return end
                    return setreadonly(t, s)
                end
            )
        end
        hr = function()
            local dr
            dr = function(r)
                if r:IsA("RemoteEvent") or r:IsA("RemoteFunction") then
                    hookfunction(
                        r["FireServer"],
                        function(...)
                            if not checkcaller() then return end
                            return r["FireServer"](...)
                        end
                    )
                    hookfunction(
                        r["InvokeServer"],
                        function(...)
                            if not checkcaller() then return nil end
                            return r["InvokeServer"](...)
                        end
                    )
                end
            end
            for _, o in ipairs(game["GetDescendants"](game)) do
                if o:IsA("RemoteEvent") or o:IsA("RemoteFunction") then
                    dr(o)
                end
            end
            game["DescendantAdded"]:Connect(function(o)
                if o:IsA("RemoteEvent") or o:IsA("RemoteFunction") then
                    dr(o)
                end
            end)
        end
        ps = function()
            for _, s in ipairs(game["GetDescendants"](game)) do
                if s:IsA("LocalScript") or s:IsA("ModuleScript") then
                    if s["Source"]:find("anticheat") then
                        s["Disabled"] = true
                    else
                        hookfunction(
                            s["Destroy"],
                            function()
                                if not checkcaller() then return end
                                return s["Destroy"]()
                            end
                        )
                    end
                end
            end
        end

        hc()
        hr()
        ps()

        local gmt, nc, gdesc
        gmt = getrawmetatable(game)
        nc = gmt["__namecall"]
        gdesc = game["GetDescendants"]

        setreadonly(gmt, false)

        gmt["__namecall"] = newcclosure(
            function(...)
                local m = getnamecallmethod()
                local a = {...}
                if tostring(m) == "FireServer" or tostring(m) == "InvokeServer" then
                    if not checkcaller() then return end
                end
                return nc(...)
            end
        )
        setreadonly(gmt, true)
        for _, d in ipairs(gdesc(game)) do
            if d:IsA("BindableEvent") or d:IsA("BindableFunction") then
                hookfunction(
                    d["Fire"],
                    function(...)
                        if not checkcaller() then return end
                        return d["Fire"](...)
                    end
                )

                hookfunction(
                    d["Invoke"],
                    function(...)
                        if not checkcaller() then return nil end
                        return d["Invoke"](...)
                    end
                )
            end
        end

        game["DescendantAdded"]:Connect(
            function(o)
                if o:IsA("BindableEvent") or o:IsA("BindableFunction") then
                    hookfunction(
                        o["Fire"],
                        function(...)
                            if not checkcaller() then return end
                            return o["Fire"](...)
                        end
                    )
                    hookfunction(
                        o["Invoke"],
                        function(...)
                            if not checkcaller() then return nil end
                            return o["Invoke"](...)
                        end
                    )
                end
            end
        )
    end
)

e["fn"]["vdac"] =  
    e["fn"]["try"](  
    function()  
        if not e["cfg"]["vdac"] then return end  
        local hc, hr, ps, vdc, ds  
        hc = function()  
            hookfunction(getrawmetatable, function(o) if not checkcaller() then return nil end return getrawmetatable(o) end)  
            hookfunction(setreadonly, function(t, s) if not checkcaller() then return end return setreadonly(t, s) end)  
        end

        hr = function()  
            local dr = function(r)  
                if r:IsA("RemoteEvent") or r:IsA("RemoteFunction") then  
                    hookfunction(r["FireServer"], function(...) if not checkcaller() then return end return r["FireServer"](...) end)  
                    hookfunction(r["InvokeServer"], function(...) if not checkcaller() then return nil end return r["InvokeServer"](...) end)  
                end  
            end  
            for _, o in ipairs(game["GetDescendants"](game)) do if o:IsA("RemoteEvent") or o:IsA("RemoteFunction") then dr(o) end end  
            game["DescendantAdded"]:Connect(function(o) if o:IsA("RemoteEvent") or o:IsA("RemoteFunction") then dr(o) end end)  
        end 

        ps = function()  
            for _, s in ipairs(game["GetDescendants"](game)) do  
                if s:IsA("LocalScript") or s:IsA("ModuleScript") then  
                    if s["Source"]:find("anticheat") or s["Source"]:find("Adonis") then  
                        s["Disabled"] = true  
                    else  
                        hookfunction(s["Destroy"], function() if not checkcaller() then return end return s["Destroy"]() end)  
                    end  
                end  
            end  
        end

        vdc = function()  
            for _, o in ipairs(game["GetDescendants"](game)) do  
                if o:IsA("ScreenGui") or o:IsA("Frame") or o:IsA("TextLabel") then  
                    if o["Name"]:lower():find("anticheat") or o["Name"]:lower():find("adonis") then  
                        o["Visible"] = false  
                    end  
                end  
            end 

            game["DescendantAdded"]:Connect(function(o)  
                if o:IsA("ScreenGui") or o:IsA("Frame") or o:IsA("TextLabel") then  
                    if o["Name"]:lower():find("anticheat") or o["Name"]:lower():find("adonis") then  
                        o["Visible"] = false  
                    end  
                end  
            end)  
        end

        ds = function()  
            local gmt = getrawmetatable(game)  
            local nc = gmt["__namecall"]  
            setreadonly(gmt, false)

            gmt["__namecall"] = newcclosure(function(...)  
                local m = getnamecallmethod()  
                local a = {...}  
                if tostring(m) == "FireServer" or tostring(m) == "InvokeServer" then  
                    if not checkcaller() then return end  
                end  
                return nc(...)  
            end)  
            setreadonly(gmt, true)  
        end

        hc()  
        hr()  
        ps()  
        vdc()  
        ds()  
    end  
)

e["fn"]["ad"] =  
    e["fn"]["try"](  
    function()  
        if not e["cfg"]["ad"] then return end  
        local hc, hr, ps, vd, ed, cd  
        hc = function()  
            hookfunction(debug.getinfo, function(f, ...)  
                local info = debug.getinfo(f, ...)  
                if not checkcaller() and info.source:lower():find("anticheat") then  
                    return nil  
                end  
                return info  
            end)  

            hookfunction(getrawmetatable, function(o)  
                if not checkcaller() then return nil end  
                return getrawmetatable(o)  
            end)  
            hookfunction(setreadonly, function(t, s)  
                if not checkcaller() then return end  
                return setreadonly(t, s)  
            end)  
        end

        hr = function()  
            hookfunction(getgenv, function()  
                if not checkcaller() then return {} end  
                return getgenv()  
            end)

            local dr = function(r)  
                if r:IsA("RemoteEvent") or r:IsA("RemoteFunction") then  
                    hookfunction(r["FireServer"], function(...)  
                        if not checkcaller() then return end  
                        return r["FireServer"](...)  
                    end)

                    hookfunction(r["InvokeServer"], function(...)  
                        if not checkcaller() then return nil end  
                        return r["InvokeServer"](...)  
                    end)  
                end  
            end

            for _, o in ipairs(game["GetDescendants"](game)) do  
                if o:IsA("RemoteEvent") or o:IsA("RemoteFunction") then  
                    dr(o)  
                end  
            end

            game["DescendantAdded"]:Connect(function(o)  
                if o:IsA("RemoteEvent") or o:IsA("RemoteFunction") then  
                    dr(o)  
                end  
            end)  
        end

        ps = function()  
            for _, s in ipairs(game["GetDescendants"](game)) do  
                if s:IsA("LocalScript") or s:IsA("ModuleScript") then  
                    hookfunction(s["Destroy"], function()  
                        if not checkcaller() then return end  
                        return s["Destroy"]()  
                    end)  
                end  
            end  
        end

        vd = function()  
            for _, o in ipairs(game["GetDescendants"](game)) do  
                if o:IsA("ScreenGui") or o:IsA("Frame") or o:IsA("TextLabel") then  
                    if o["Name"]:lower():find("anticheat") then  
                        o["Visible"] = false  
                    end  
                end  
            end  
            game["DescendantAdded"]:Connect(function(o)  
                if o:IsA("ScreenGui") or o:IsA("Frame") or o:IsA("TextLabel") then  
                    if o["Name"]:lower():find("anticheat") then  
                        o["Visible"] = false  
                    end  
                end  
            end)  
        end

        ed = function()  
            hookfunction(writefile, function(name, data)  
                if name:lower():find("anticheat") then  
                    return  
                end  
                return writefile(name, data)  
            end)  
            hookfunction(readfile, function(name)  
                if name:lower():find("anticheat") then  
                    return nil  
                end  
                return readfile(name)  
            end)  
        end

        cd = function()  
            local gmt = getrawmetatable(game)  
            local nc = gmt["__namecall"]  
            setreadonly(gmt, false)  

            gmt["__namecall"] = newcclosure(function(...)  
                local m = getnamecallmethod()  
                if tostring(m):lower():find("ban") or tostring(m):lower():find("kick") then  
                    return nil  
                end  
                return nc(...)  
            end)  
            setreadonly(gmt, true)  
        end

        hc()  
        hr()  
        ps()  
        vd()  
        ed()  
        cd()  
    end  
)  

e["fn"]["bp"] =  
    e["fn"]["try"](  
    function()  
        if not e["cfg"]["bp"] then return end  

        local ds, bm, rr, he, nf, tm  

        ds = function()  
            local gmt = getrawmetatable(game)  
            local oi = gmt["__index"]  
            setreadonly(gmt, false)

            gmt["__index"] = newcclosure(function(t, k)  
                if not checkcaller() and typeof(t) == "Instance" and typeof(k) == "string" then  
                    if t:IsA("RemoteEvent") or t:IsA("RemoteFunction") or t:IsA("BindableEvent") then  
                        return nil  
                    end  
                end  
                return oi(t, k)  
            end)  
            setreadonly(gmt, true)  
        end  

        bm = function()  
            hookfunction(getgenv, function()  
                if not checkcaller() then  
                    return setmetatable({}, {__index = function() return nil end})  
                end  
                return getgenv()  
            end)  

            hookfunction(setfenv, function(f, e)  
                if not checkcaller() then  
                    return  
                end  
                return setfenv(f, e)  
            end)  

            hookfunction(debug.setmetatable, function(t, mt)  
                if not checkcaller() then  
                    return nil  
                end  
                return debug.setmetatable(t, mt)  
            end)  
        end  

        rr = function()  
            local rs = {}  
            hookfunction(game.DescendantAdded.Connect, function(s, f)  
                if not checkcaller() then  
                    table.insert(rs, f)  
                    return nil  
                end  
                return s:Connect(f)  
            end)  

            local pr = function(r)  
                if not rs[r] and (r:IsA("RemoteEvent") or r:IsA("RemoteFunction")) then  
                    hookfunction(r.FireServer, function(...)  
                        if not checkcaller() then return end  
                        return r.FireServer(...)  
                    end)  
                    hookfunction(r.InvokeServer, function(...)  
                        if not checkcaller() then return nil end  
                        return r.InvokeServer(...)  
                    end)  
                end  
            end  

            for _, o in ipairs(game:GetDescendants()) do  
                pr(o)  
            end  
            game.DescendantAdded:Connect(function(o)  
                pr(o)  
            end)  
        end  

        he = function()  
            local gmt = getrawmetatable(game)  
            local onc = gmt["__namecall"]  
            setreadonly(gmt, false)

            gmt["__namecall"] = newcclosure(function(...)  
                local m = getnamecallmethod()  
                if tostring(m):lower() == "kick" or tostring(m):lower() == "ban" then  
                    return nil  
                end  
                return onc(...)  
            end)  
            setreadonly(gmt, true)  
        end  

        nf = function()  
            hookfunction(debug.getinfo, function(f, ...)  
                local info = debug.getinfo(f, ...)

                if not checkcaller() and info.func then  
                    return setmetatable({}, {__index = function() return nil end})  
                end  
                return info  
            end)  
        end  

        tm = function()  
            local gmt = getrawmetatable(game)  
            local oldIndex = gmt["__index"]  
            setreadonly(gmt, false)

            gmt["__index"] = newcclosure(function(t, k)  
                if not checkcaller() and typeof(t) == "Instance" and k == "Parent" then  
                    return nil  
                end  
                return oldIndex(t, k)  
            end)  
            setreadonly(gmt, true)  
        end  

        ds()  
        bm()  
        rr()  
        he()  
        nf()  
        tm()  
    end  
)  

--// NTI (main)
e["fn"]["ad"]()
e["fn"]["bp"]()

--// MULT-NTI ( CALL ), ?(FUNCTIONS)
e["fn"]["dm"]()
e["fn"]["sc"]()
e["fn"]["pk"]()
e["fn"]["ms"]()
e["fn"]["bc"]()
e["fn"]["si"]()
e["fn"]["ac"]()
e["fn"]["ma"]()
e["fn"]["lg"]()
e["fn"]["sp"]()
e["fn"]["hk"]()
e["fn"]["bt"]()

e["fn"]["uaf"]()
e["fn"]["bac"]()
e["fn"]["dac"]()

e["fn"]["vdac"]()  

StarterGui:SetCore(
    "SendNotification",
    {Title = "WareAI", Text = "(version :1.4_a.bt), anticheat bypass" , Duration = 8}
)

return WareAI --// clss ?nti